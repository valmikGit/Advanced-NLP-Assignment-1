#!/usr/bin/env python3
"""
cleanup_checkpoints.py

A utility script to clean up intermediate checkpoint files and logging directories
generated by the Hugging Face Trainer.

This script targets and removes:
- All subdirectories starting with 'checkpoint-'
- The 'runs' subdirectory used for TensorBoard logging

It leaves the final trained model adapter files in the specified output directory.
"""

import os
import argparse
import shutil

def cleanup_artifacts(output_dir: str, is_dry_run: bool, assume_yes: bool):
    """
    Finds and removes intermediate training artifacts from a given directory.

    Args:
        output_dir (str): The directory where training outputs were saved.
        is_dry_run (bool): If True, only print what would be deleted.
        assume_yes (bool): If True, skip the confirmation prompt.
    """
    if not os.path.isdir(output_dir):
        print(f"Error: Output directory not found at '{output_dir}'")
        return

    print(f"Scanning for intermediate artifacts in: '{output_dir}'")

    targets_to_delete = []

    # Find all subdirectories to be removed
    for filename in os.listdir(output_dir):
        full_path = os.path.join(output_dir, filename)
        if os.path.isdir(full_path):
            if filename.startswith("checkpoint-") or filename == "runs":
                targets_to_delete.append(full_path)

    if not targets_to_delete:
        print("No intermediate checkpoint or 'runs' directories found to clean up.")
        return

    print("\nThe following directories/files will be PERMANENTLY DELETED:")
    for target in targets_to_delete:
        print(f"- {target}")
    
    if is_dry_run:
        print("\n[DRY RUN] No files were deleted.")
        return

    # Get user confirmation
    if not assume_yes:
        confirm = input("\nAre you sure you want to proceed? (y/N): ")
        if confirm.lower() != 'y':
            print("Cleanup cancelled by user.")
            return
    
    print("\n--- Starting cleanup ---")
    deleted_count = 0
    for target in targets_to_delete:
        try:
            shutil.rmtree(target)
            print(f"Successfully deleted: {target}")
            deleted_count += 1
        except OSError as e:
            print(f"Error deleting {target}: {e}")
    
    print(f"\n--- Cleanup complete. Deleted {deleted_count} directories. ---")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Clean up intermediate Hugging Face Trainer checkpoints and logs."
    )
    parser.add_argument(
        "--output_dir",
        type=str,
        default="./bert_peft_adapter",
        help="The output directory from your training script that contains the checkpoints."
    )
    parser.add_argument(
        "--dry_run",
        action="store_true",
        help="Perform a dry run, showing what would be deleted without actually deleting anything."
    )
    parser.add_argument(
        "-y", "--yes",
        action="store_true",
        help="Automatically answer 'yes' to the confirmation prompt."
    )
    
    args = parser.parse_args()
    cleanup_artifacts(args.output_dir, args.dry_run, args.yes)